1)
            _hubConnection.Headers.Add("Authorization", "Basic " + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(user + ":")));
            _proxy = _hubConnection.CreateHubProxy("ChatService");
            _hubConnection.Start().Wait();



2)
            return await _proxy.Invoke<IEnumerable<ChatUser>>("GetUsers");


2a)
        public IEnumerable<ChatUser> GetUsers()
        {
            return UsersRepository.GetUsers();
        }


3)
            UserConnectionStatus = Observable
                .Create<UserConnectionNotification>(o =>
                {
                    var resources = new CompositeDisposable();
                    resources.Add(_proxy.On("NotifyUserConnected", (string userName) =>
                    {
                        o.OnNext(new UserConnectionNotification {UserName = userName, IsConnected = true});
                    }));
                    resources.Add(_proxy.On("NotifyUserDisconnected", (string userName) =>
                    {
                        o.OnNext(new UserConnectionNotification {UserName = userName, IsConnected = false});
                    }));
                    return resources;
                })
                .Publish()
                .RefCount();

3a)

        public async override Task OnConnected()
        {
            var user = UsersRepository.UserLoggedIn(Context.User.Identity.Name);
            await Clients.AllExcept(Context.ConnectionId).NotifyUserConnected(user.Name);
            await base.OnConnected();
        }

        public async override Task OnDisconnected(bool stopCalled)
        {
            var user = UsersRepository.UserLoggedOff(Context.User.Identity.Name);
            await Clients.AllExcept(Context.ConnectionId).NotifyUserDisconnected(user.Name);
            await base.OnDisconnected(stopCalled);
        }

        public override Task OnReconnected()
        {
            return base.OnReconnected();
        }


4)
            return await _proxy.Invoke<IEnumerable<ChatRoomDetails>>("GetChatRooms");

4a)
        public IEnumerable<ChatRoomDetails> GetChatRooms()
        {
            return ChatRoomManager.Instance.GetRooms();
        }


5)
            return Observable.Create<ChatMessage>(async o =>
            {
                var result = _messageStream.Where(p => string.Equals(p.Room, room)).Subscribe(o);
                await _proxy.Invoke<string>("EnterRoom", room);
                var leaveRoom = Disposable.Create(async () => await _proxy.Invoke<string>("LeaveRoom", room));
                return new CompositeDisposable(result, leaveRoom);
            });

5a)
        public async void EnterRoom(string roomName)
        {
            await Groups.Add(Context.ConnectionId, roomName);
            var stream = ChatRoomManager.Instance.GetPublishedMessages(roomName);
            stream.Subscribe(msg => Clients.Caller.OnNewChatMessage(msg));
        }

        public async void LeaveRoom(string roomName)
        {
            await Groups.Remove(Context.ConnectionId, roomName);
        }


6)
            _messageStream = Observable
                .Create<ChatMessage>(o =>
                {
                    return _proxy.On("OnNewChatMessage", (ChatMessage message) => o.OnNext(message));
                })
                .Publish()
                .RefCount();

7)
            await _proxy.Invoke<ChatMessage>("SendMessage", message);


7a)
        public async void SendMessage(ChatMessage message)
        {
            message = ChatRoomManager.Instance.OnNewMessage(message, Context.User.Identity.Name);
            await Clients.Group(message.Room).OnNewChatMessage(message);
        }


HUB:

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading.Tasks;
using DtoModel;
using Microsoft.AspNet.SignalR;
using Microsoft.AspNet.SignalR.Hubs;


namespace WebApplication.Infrastructure
{
    [HubName("ChatService")]
    public class ChatServiceHub : Hub
    {
        public IEnumerable<ChatUser> GetUsers()
        {
            return UsersRepository.GetUsers();
        }

        public IEnumerable<ChatRoomDetails> GetChatRooms()
        {
            return ChatRoomManager.Instance.GetRooms();
        }

        public async void EnterRoom(string roomName)
        {
            await Groups.Add(Context.ConnectionId, roomName);
            var stream = ChatRoomManager.Instance.GetPublishedMessages(roomName);
            stream.Subscribe(msg => Clients.Caller.OnNewChatMessage(msg));
        }

        public async void LeaveRoom(string roomName)
        {
            await Groups.Remove(Context.ConnectionId, roomName);
        }

        public async void SendMessage(ChatMessage message)
        {
            message = ChatRoomManager.Instance.OnNewMessage(message, Context.User.Identity.Name);
            await Clients.Group(message.Room).OnNewChatMessage(message);
        }

        public async override Task OnConnected()
        {
            var user = UsersRepository.UserLoggedIn(Context.User.Identity.Name);
            await Clients.AllExcept(Context.ConnectionId).NotifyUserConnected(user.Name);
            await base.OnConnected();
        }

        public async override Task OnDisconnected(bool stopCalled)
        {
            var user = UsersRepository.UserLoggedOff(Context.User.Identity.Name);
            await Clients.AllExcept(Context.ConnectionId).NotifyUserDisconnected(user.Name);
            await base.OnDisconnected(stopCalled);
        }

        public override Task OnReconnected()
        {
            return base.OnReconnected();
        }
    }
}




CLIENT:

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Chat.Client.Model;
using DtoModel;
using Microsoft.AspNet.SignalR.Client;

namespace Chat.Client.ControlLogic
{
    public class ChatClient : IDisposable
    {
        private readonly HubConnection _hubConnection;
        private readonly IHubProxy _proxy;
        private readonly IObservable<ChatMessage> _messageStream;

        public ChatClient(string user)
        {
            string url = ConfigurationManager.AppSettings["ServiceBaseUrl"];
            _hubConnection = new HubConnection(url);
            _hubConnection.Headers.Add("Authorization", "Basic " + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(user + ":")));
            _proxy = _hubConnection.CreateHubProxy("ChatService");

            UserConnectionStatus = Observable
                .Create<UserConnectionNotification>(o =>
                {
                    var resources = new CompositeDisposable();
                    resources.Add(_proxy.On("NotifyUserConnected", (string userName) =>
                    {
                        o.OnNext(new UserConnectionNotification {UserName = userName, IsConnected = true});
                    }));
                    resources.Add(_proxy.On("NotifyUserDisconnected", (string userName) =>
                    {
                        o.OnNext(new UserConnectionNotification {UserName = userName, IsConnected = false});
                    }));
                    return resources;
                })
                .Publish()
                .RefCount();

            _messageStream = Observable
                .Create<ChatMessage>(o =>
                {
                    return _proxy.On("OnNewChatMessage", (ChatMessage message) => o.OnNext(message));
                })
                .Publish()
                .RefCount();

            _hubConnection.Start().Wait();
        }

        public IObservable<UserConnectionNotification> UserConnectionStatus { get; private set; }

        public async Task<IEnumerable<ChatUser>> GetUsers()
        {
            return await _proxy.Invoke<IEnumerable<ChatUser>>("GetUsers");
        }

        public async Task<IEnumerable<ChatRoomDetails>> GetChatRooms()
        {
            return await _proxy.Invoke<IEnumerable<ChatRoomDetails>>("GetChatRooms");
        }

        public async Task SendMessage(ChatMessage message)
        {
            await _proxy.Invoke<ChatMessage>("SendMessage", message);
        }

        public IObservable<ChatMessage> EnterRoom(string room)
        {
            return Observable.Create<ChatMessage>(async o =>
            {
                var result = _messageStream.Where(p => string.Equals(p.Room, room)).Subscribe(o);
                await _proxy.Invoke<string>("EnterRoom", room);
                return result;
            });
        }

        public void Dispose()
        {
            _hubConnection.Dispose();            
        }
    }
}
